@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Sales Records</h2>
<div>
    @Html.Partial("_AddProductSoldModal")
</div>

<div>
    <table id="productSolds" data-bind="PSViewModel" class="table table-light table-hover">
        <thead>
            <tr>
                <th style="display: none">Id</th>
                <th>Customer Name</th>
                <th>Product Name</th>
                <th>Store Name</th>
                <th>Date Sold</th>
                <th>Action(Edit)</th>
                <th>Action(Delete)</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: productSolds">
            <tr>
                <td style="display:none" data-bind="text: id "></td>
                <td data-bind="text: customer.name"></td>
                <td data-bind="text: product.name"></td>
                <td data-bind="text: store.name"></td>
                <td data-bind="text: moment(dateSold).format('DD/MM/YYYY')"></td>
                <td><button id="editProductSold" data-bind="click:$parent.editProductSoldBtn" class="btn btn-warning" type="button" data-toggle="modal" data-target="#editProductSoldModal"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> Edit</button></td>
                <td><button id="deleteProductSold" data-bind="click: $parent.deleteProductSoldBtn" class="btn btn-danger" type="button" data-toggle="modal" data-target="#deleteProductSoldModal"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</button></td>
            </tr>
        </tbody>
    </table>
</div>

<div>
    @Html.Partial("_DeleteProductSoldModal")
</div>
<div>
    @Html.Partial("_EditProductSoldModal")
</div>

@section scripts
{
    <script>

        $(document).ready(function () {

            ko.validation.rules.pattern.message = 'Invalid.';

            ko.validation.init({
                registerExtenders: true,
                messagesOnModified: true,
                insertMessages: true,
                parseInputAttributes: true,
                messageTemplate: null
            }, true);

            function ProductSold(data) {
                this.id = ko.observable(data.id);
                this.customerId = ko.observable(data.customerId);
                this.productId = ko.observable(data.productId);
                this.storeId = ko.observable(data.storeId);
                this.dateSold = ko.observable(data.dateSold).extend({ required: { message: 'Please Enter New Date!' } });
                this.customer = ko.observable(data.customer);
                this.product = ko.observable(data.product);
                this.store = ko.observable(data.store);
            }

            var PSViewModel = {

                id: ko.observable(),
                customerId: ko.observable().extend({ required: { message: 'Please Select Customer!' } }),
                productId: ko.observable().extend({ required: { message: 'Please Select Product!' } }),
                storeId: ko.observable().extend({ required: { message: 'Please Select Store!' } }),
                dateSold: ko.observable().extend({ required: { message: 'Please Enter Date!' } }),
                customer: ko.observable(),
                product: ko.observable(),
                store: ko.observable(),

                productSold: ko.observable(),
                productSolds: ko.observableArray(),

                getAllData: function () {
                    $.getJSON("/api/salesrecords", function (data) {
                        $.each(data, function (key, value) {
                            PSViewModel.productSolds.push(ko.toJS(new ProductSold(value)));
                        });
                    });

                    $.getJSON("/api/customers", function (data) {
                        PSViewModel.customerList(data);
                    });

                    $.getJSON("/api/products", function (data) {
                        PSViewModel.productList(data);
                    });

                    $.getJSON("/api/stores", function (data) {
                        PSViewModel.storeList(data);
                    });
                },

                customerList: ko.observableArray(),
                storeList: ko.observableArray(),
                productList: ko.observableArray(),

                //Add new sales record
                addProductSold: function () {
                    if (PSViewModel.errors().length === 0) {
                        $.ajax({
                            url: "/api/salesrecords",
                            method: "POST",
                            data: ko.toJSON(this),
                            contentType: "application/json",
                            success: function (data) {
                                $("#AddProductSoldModal").modal("hide");
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                    } else {
                        PSViewModel.errors.showAllMessages();
                    }
                },

                selectedProductSold: ko.observable(),

                deleteProductSoldBtn: function (productSold) {
                    PSViewModel.selectedProductSold(productSold);
                },

                //Delete selected sales record
                deleteProductSold: function () {
                    var id = ko.toJS(PSViewModel.selectedProductSold()).id;
                    $.ajax({
                        url: "/api/salesrecords/" + id,
                        method: "DELETE",
                        contentType: 'application/json',
                        success: function () {
                            $("#deleteProductSoldModal").modal("hide");
                            location.reload(true);
                        },
                        error: function (xhr) {
                            alert(xhr.responseText);
                        }
                    });
                },

                //Push all data into selection lists where the list top is the edited data
                editProductSoldBtn: function (productSold) {

                    PSViewModel.selectedProductSold(new ProductSold(productSold));
                    PSViewModel.customerId.rules.remove(function (x) { return x.rule === "required" });
                    PSViewModel.productId.rules.remove(function (x) { return x.rule === "required" });
                    PSViewModel.storeId.rules.remove(function (x) { return x.rule === "required" });
                    PSViewModel.dateSold.rules.remove(function (x) { return x.rule === "required" });
                    PSViewModel.customerList.removeAll();
                    PSViewModel.productList.removeAll();
                    PSViewModel.storeList.removeAll();

                    PSViewModel.customerList.push(ko.toJS(PSViewModel.selectedProductSold()).customer);
                    $.getJSON("/api/customers", function (data) {
                        $.each(data, function (key, customer) {
                            if (customer.id !== PSViewModel.selectedProductSold().customerId) {
                                PSViewModel.customerList.push(customer);
                            }
                        });
                    });

                    PSViewModel.productList.push(ko.toJS(PSViewModel.selectedProductSold()).product);
                    $.getJSON("/api/products", function (data) {
                        $.each(data, function (key, product) {
                            if (product.id !== PSViewModel.selectedProductSold().productId) {
                                PSViewModel.productList.push(product);
                            }
                        });
                    });

                    PSViewModel.storeList.push(ko.toJS(PSViewModel.selectedProductSold()).store);
                    $.getJSON("/api/stores", function (data) {
                        $.each(data, function (key, store) {
                            if (store.id !== PSViewModel.selectedProductSold().storeId) {
                                PSViewModel.storeList.push(store);
                            }
                        });
                    });
                },

                //Edit selected sales record
                editProductSold: function () {
                    if (PSViewModel.errors().length == 0) {
                        var editedProductSold = ko.toJS(PSViewModel.selectedProductSold);
                        $.ajax({
                            url: "/api/salesrecords/" + editedProductSold.id,
                            method: "PUT",
                            data: ko.toJSON(PSViewModel.selectedProductSold),
                            contentType: "application/json",
                            processData: true,
                            success: function () {
                                $("#editProductSoldModal").modal("hide");
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                    } else {
                        PSViewModel.errors.showAllMessages();
                    }
                }
            }

            PSViewModel.errors = ko.validation.group(PSViewModel, { deep: true });

            ko.applyBindings(PSViewModel);
            PSViewModel.getAllData();
        });

    </script>

    @Scripts.Render("~/bundles/jqueryval")
}

