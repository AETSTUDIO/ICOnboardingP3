@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Stores</h2>

<div>
    @Html.Partial("_AddStoreModal")
</div>

<div>
    <table id="stores" data-bind="storeViewModel" class="table table-light table-hover">
        <thead>
            <tr>
                <th style="display: none">Id</th>
                <th>Name</th>
                <th>Address</th>
                <th>Action(Edit)</th>
                <th>Action(Delete)</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: stores">
            <tr>
                <td style="display:none" data-bind="text: id "></td>
                <td data-bind="text: name"></td>
                <td data-bind="text: address"></td>
                <td><button id="editStore" data-bind="click:$parent.editStoreBtn" class="btn btn-warning" type="button" data-toggle="modal" data-target="#editStoreModal"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> Edit</button></td>
                <td><button id="deleteStore" data-bind="click: $parent.selectStore" class="btn btn-danger" type="button" data-toggle="modal" data-target="#deleteStoreModal"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</button></td>
            </tr>
        </tbody>
    </table>
</div>

<div>
    @Html.Partial("_DeleteStoreModal")
</div>
<div>
    @Html.Partial("_EditStoreModal")
</div>

@section scripts
{
    <script>

        $(document).ready(function () {

            ko.validation.rules.pattern.message = 'Invalid.';

            ko.validation.init({
                registerExtenders: true,
                messagesOnModified: true,
                insertMessages: true,
                parseInputAttributes: true,
                messageTemplate: null
            }, true);

            function storeViewModel() {
                var self = this;

                self.id = ko.observable();
                self.name = ko.observable().extend({ required: { message: 'Please Enter Store Name!' } });
                self.address = ko.observable().extend({ required: { message: 'Please Enter Store Address!' } });
                self.errors = ko.validation.group(self, { deep: true });

                var store = {
                    id: self.id,
                    name: self.name,
                    address: self.address
                }

                self.store = ko.observable();
                self.stores = ko.observableArray();

                $.getJSON("/api/stores", function (data) {
                    self.stores(data);
                });

                self.addStore = function () {
                    if (self.errors().length === 0) {
                        var newStore = ko.toJSON(this);
                        $.ajax({
                            url: "/api/stores",
                            method: "POST",
                            data: newStore,
                            contentType: "application/json",
                            success: function () {
                                $("#newStoreModal").modal("hide");
                                location.reload(true);
                            }
                        });
                    } else {
                        self.errors.showAllMessages();
                        $("#addModalMessage").removeAttr("style");
                    }
                };

                self.selectedStore = ko.observable();

                self.selectStore = function (store) {
                    self.selectedStore(store);
                }

                self.deleteStore = function () {
                        var id = self.selectedStore().id;
                        $.ajax({
                            url: "/api/stores/" + id,
                            method: "DELETE",
                            contentType: 'application/json',
                            success: function () {
                                $("#deleteStoreModal").modal("hide");
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                };

                self.editStoreBtn = function (store) {
                    self.store(store);
                }

                self.editStore = function () {
                    var editedStore = self.store();
                    $.ajax({
                        url: "/api/stores/" + editedStore.id,
                        method: "PUT",
                        data: ko.toJSON(editedStore),
                        contentType: "application/json",
                        processData: true,
                        success: function () {
                            $("#editStoreModal").modal("hide");
                            location.reload(true);
                        },
                        error: function (xhr) {
                            alert(xhr.responseText);
                        }
                    });
                };
            }

            var storeViewModel = new storeViewModel();
            ko.applyBindings(storeViewModel);
        });

    </script>

    @Scripts.Render("~/bundles/jqueryval")
}
