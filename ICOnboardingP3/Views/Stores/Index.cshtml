@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Stores</h2>

<div>
    @Html.Partial("_AddStoreModal")
</div>

<div>
    <table id="stores" data-bind="storeViewModel" class="table table-light table-hover">
        <thead>
            <tr>
                <th style="display: none">Id</th>
                <th>Name</th>
                <th>Address</th>
                <th>Action(Edit)</th>
                <th>Action(Delete)</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: stores">
            <tr>
                <td style="display:none" data-bind="text: id "></td>
                <td data-bind="text: name"></td>
                <td data-bind="text: address"></td>
                <td><button id="editStore" data-bind="click:$parent.editStoreBtn" class="btn btn-warning" type="button" data-toggle="modal" data-target="#editStoreModal"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> Edit</button></td>
                <td><button id="deleteStore" data-bind="click: $parent.deleteStoreBtn" class="btn btn-danger" type="button" data-toggle="modal" data-target="#deleteStoreModal"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</button></td>
            </tr>
        </tbody>
    </table>
</div>

<div>
    @Html.Partial("_DeleteStoreModal")
</div>
<div>
    @Html.Partial("_EditStoreModal")
</div>

@section scripts
{
    <script>

        $(document).ready(function () {

            ko.validation.rules.pattern.message = 'Invalid.';

            ko.validation.init({
                registerExtenders: true,
                messagesOnModified: true,
                insertMessages: true,
                parseInputAttributes: true,
                messageTemplate: null
            }, true);

            function Store(data) {
                this.id = ko.observable(data.id);
                this.name = ko.observable(data.name).extend({ required: { message: 'Please Enter New Store Name!' } });
                this.address = ko.observable(data.address).extend({ required: { message: 'Please Enter New Store Address!' } });
            }

            var storeViewModel = {

                id: ko.observable(),
                name: ko.observable().extend({ required: { message: 'Please Enter Store Name!' } }),
                address: ko.observable().extend({ required: { message: 'Please Enter Store Address!' } }),


                store: ko.observable(),
                stores: ko.observableArray(),

                getStores: function () {
                    storeViewModel.stores.removeAll();
                    $.getJSON("/api/stores", function (data) {
                        $.each(data, function (key, value) {
                            storeViewModel.stores.push(new Store(value));
                        });
                    });
                },
                

                addStore: function () {
                    if (storeViewModel.errors().length === 0) {
                        var newStore = ko.toJSON(this);
                        $.ajax({
                            url: "/api/stores",
                            method: "POST",
                            data: newStore,
                            contentType: "application/json",
                            success: function () {
                                $("#newStoreModal").modal("hide");
                                location.reload(true);
                            }
                        });
                    } else {
                        storeViewModel.errors.showAllMessages();
                    }
                },

                selectedStore: ko.observable(),

                deleteStoreBtn: function (store) {
                    storeViewModel.selectedStore(store);
                },

                deleteStore: function () {
                        var id = ko.toJS(storeViewModel.selectedStore).id;
                        $.ajax({
                            url: "/api/stores/" + id,
                            method: "DELETE",
                            contentType: 'application/json',
                            success: function () {
                                $("#deleteStoreModal").modal("hide");
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                },

                editStoreBtn: function (store) {
                    storeViewModel.selectedStore(store);
                    storeViewModel.name.rules.remove(function (x) { return x.rule === "required" });
                    storeViewModel.address.rules.remove(function (x) { return x.rule === "required" });
                },

                editStore: function () {
                    if (storeViewModel.errors().length === 0) {
                        var editedStore = ko.toJS(storeViewModel.selectedStore);
                        $.ajax({
                            url: "/api/stores/" + editedStore.id,
                            method: "PUT",
                            data: ko.toJSON(editedStore),
                            contentType: "application/json",
                            processData: true,
                            success: function () {
                                $("#editStoreModal").modal("hide");
                                location.reload(true);
                            },
                            error: function (xhr) {
                                alert(xhr.responseText);
                            }
                        });
                    } else {
                        storeViewModel.errors.showAllMessages();
                    }
                    
                }
            }

            storeViewModel.errors = ko.validation.group(storeViewModel, { deep: true });

            ko.applyBindings(storeViewModel);
            storeViewModel.getStores();
        });

    </script>

    @Scripts.Render("~/bundles/jqueryval")
}
